#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset


# ----------------------------- GLOBALS ---------------------------------------
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd)"
TMPDIR="${DIR}/tmp"
POLYBENCH_DIR="${DIR}/../"
UTILITIES_DIR="${POLYBENCH_DIR}/utilities"
POLYBENCH_SRC_FILE="${UTILITIES_DIR}/polybench.c"

# Submodules
BUILD_DIR="${DIR}/../../../build"
LLVM_DIR="${DIR}/../../../llvm/"
PLUTO_DIR="${DIR}/../../../pluto"

# Compilation options.
CLANG_FLAGS=(-fno-vectorize -fno-slp-vectorize -fno-tree-vectorize -fno-unroll-loops)
POLYBENCH_FLAGS=(-I "${UTILITIES_DIR}" -I "${LLVM_DIR}/build/lib/clang/13.0.0/include/" -D POLYBENCH_TIME -D EXTRALARGE_DATASET)
LDFLAGS=(-lm)

# ----------------------------- Setup ENV -------------------------------------
export PATH="${PATH}:${PLUTO_DIR}"
export PATH="${LLVM_DIR}/build/bin:${PATH}"
export PATH="${BUILD_DIR}/bin:${PATH}"

# -----------------------------  Compile  -------------------------------------
function compile_mlir() {
  local src_file="$1"
  local dst_file="${src_file%.c}.mlir"

  mlir-clang "${src_file}" "${POLYBENCH_FLAGS[@]}" 2>&1 | tee "${dst_file}" &>/dev/null
}

function annotate_splittable() {
  local src_file="$1"
  local dst_file="${src_file%.mlir}.splittable.mlir"

  polymer-opt -annotate-splittable "${src_file}" 2>&1 | tee "${dst_file}" &>/dev/null
}

function polymer_opt() {
  local all_args=("$@")
  local src_file="$1"
  local dst_file="${src_file%.splittable.mlir}.polymer.mlir"
  local split_ids=("${all_args[@]:1}")

  local polymer_options=()
  for id in "${split_ids[@]}"; do
    polymer_options+=(-scop-stmt-split="to-split=${id}")
  done
  if (( ${#split_ids[@]} )); then
    polymer_options+=(-unify-scratchpad)
  fi
  polymer_options+=("-canonicalize" "-reg2mem" "-extract-scop-stmt" "-pluto-opt")

  polymer-opt "${polymer_options[@]}" "${src_file}" 2>/dev/null | tee "${dst_file}" &>/dev/null
}

function compile() {
  local src_file="$1"
  local llvm_file="${src_file%.mlir}.ll"
  local dst_file="${src_file%.mlir}.exe"

  mlir-opt -lower-affine -convert-scf-to-std -canonicalize -inline -convert-std-to-llvm "${src_file}" |\
    mlir-translate -mlir-to-llvmir > "${llvm_file}"

  clang "${llvm_file}" "${POLYBENCH_SRC_FILE}" -march=native -O3 "${CLANG_FLAGS[@]}" -o "${dst_file}" "${LDFLAGS[@]}" "${POLYBENCH_FLAGS[@]}"

}

# Execute the given executable and return the overall run time.
# The execution process will be wrapped in taskset.
function run() {
  local exe_file="$1"
  local num_runs=$2
  local i=0

  result_str="$(basename "${exe_file%.exe}")"
  until [ $i -ge "${num_runs}" ]; do
    result_str="${result_str},$(taskset -c 0-0 numactl -i all "${exe_file}")"
    ((i=i+1))
  done

  echo "${result_str}"
}



# Update build if necessary
function try_rebuild() {
  cd "${PWD}/../../../build" && cmake --build . --target all >/dev/null 2>&1  && cd - &>/dev/null
}

ALL_ARGS=("$@")
TARGET="${1}/${1}.origin.c"
SPLIT_IDS=("${ALL_ARGS[@]:1}")

try_rebuild
compile_mlir "${TARGET}"
annotate_splittable "${TARGET%.c}.mlir"
polymer_opt "${TARGET%.c}.splittable.mlir" "${SPLIT_IDS[@]}"
compile "${TARGET%.c}.mlir"
compile "${TARGET%.c}.polymer.mlir"

# run "${TARGET%.c}.exe" 5
run "${TARGET%.c}.polymer.exe" 5
