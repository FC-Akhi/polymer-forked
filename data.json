{
    "initializeFuncOpInterface()": {
        "oslValueTable": {
            "<block argument> of type 'index' at index: 0": [
                "i0",
                "i1",
                "i2"
            ],
            "%0 = memref.alloc() : memref<64x64xf32>": [
                "A1"
            ],
            "%1 = memref.alloc() : memref<64x64xf32>": [
                "A2"
            ],
            "%2 = memref.alloc() : memref<64x64xf32>": [
                "A3"
            ]
        },
        "getSourceFuncOp()": {
            "getSourceFuncName()": {
                "commentStr": "matmul"
            },
            "sourceFuncOp": "func @matmul() {\n  %0 = memref.alloc() : memref<64x64xf32>\n  %1 = memref.alloc() : memref<64x64xf32>\n  %2 = memref.alloc() : memref<64x64xf32>\n  affine.for %arg0 = 0 to 64 {\n    affine.for %arg1 = 0 to 64 {\n      affine.for %arg2 = 0 to 64 {\n        call @S0(%arg0, %arg1, %2, %arg2, %1, %0) : (index, index, memref<64x64xf32>, index, memref<64x64xf32>, memref<64x64xf32>) -> ()\n      }\n    }\n  }\n  return\n}"
        },
        "getSourceFuncName()": {
            "commentStr": "matmul"
        },
        "funcName": "matmul_opt",
        "sourceFuncOp location": "loc(\"test/archive/PlutoTransform/matmul.mlir\":5:1)",
        "sourceFuncOp func return type": "() -> ()",
        "arguments": null
    },
    "initializeSymbolTable()": {
        "*oslSymbolTable": {
            "A1": [
                "%0 = memref.alloc() : memref<64x64xf32>"
            ],
            "A2": [
                "%1 = memref.alloc() : memref<64x64xf32>"
            ],
            "A3": [
                "%2 = memref.alloc() : memref<64x64xf32>"
            ],
            "i0": [
                "<block argument> of type 'index' at index: 0"
            ],
            "i1": [
                "<block argument> of type 'index' at index: 0"
            ],
            "i2": [
                "<block argument> of type 'index' at index: 0"
            ]
        },
        "symbolTableInsideinitializeSymbolTable()": {
            "zero": [
                "%c0 = arith.constant 0 : index"
            ]
        },
        "initializeSymbol()": {
            "symbol": [
                "A1",
                "A2",
                "A3",
                "i0",
                "i1",
                "i2"
            ],
            "defOp": [
                "%0 = memref.alloc() : memref<64x64xf32>",
                "%1 = memref.alloc() : memref<64x64xf32>",
                "%2 = memref.alloc() : memref<64x64xf32>"
            ],
            "parentOp": [
                "func @matmul() {\n  %0 = memref.alloc() : memref<64x64xf32>\n  %1 = memref.alloc() : memref<64x64xf32>\n  %2 = memref.alloc() : memref<64x64xf32>\n  affine.for %arg0 = 0 to 64 {\n    affine.for %arg1 = 0 to 64 {\n      affine.for %arg2 = 0 to 64 {\n        call @S0(%arg0, %arg1, %2, %arg2, %1, %0) : (index, index, memref<64x64xf32>, index, memref<64x64xf32>, memref<64x64xf32>) -> ()\n      }\n    }\n  }\n  return\n}",
                "func @matmul() {\n  %0 = memref.alloc() : memref<64x64xf32>\n  %1 = memref.alloc() : memref<64x64xf32>\n  %2 = memref.alloc() : memref<64x64xf32>\n  affine.for %arg0 = 0 to 64 {\n    affine.for %arg1 = 0 to 64 {\n      affine.for %arg2 = 0 to 64 {\n        call @S0(%arg0, %arg1, %2, %arg2, %1, %0) : (index, index, memref<64x64xf32>, index, memref<64x64xf32>, memref<64x64xf32>) -> ()\n      }\n    }\n  }\n  return\n}",
                "func @matmul() {\n  %0 = memref.alloc() : memref<64x64xf32>\n  %1 = memref.alloc() : memref<64x64xf32>\n  %2 = memref.alloc() : memref<64x64xf32>\n  affine.for %arg0 = 0 to 64 {\n    affine.for %arg1 = 0 to 64 {\n      affine.for %arg2 = 0 to 64 {\n        call @S0(%arg0, %arg1, %2, %arg2, %1, %0) : (index, index, memref<64x64xf32>, index, memref<64x64xf32>, memref<64x64xf32>) -> ()\n      }\n    }\n  }\n  return\n}"
            ]
        },
        "symbolTableAfterinitializeSymbol()call": {
            "zero": [
                "%c0 = arith.constant 0 : index"
            ],
            "A1": [
                "%2 = memref.alloc() : memref<64x64xf32>"
            ],
            "A2": [
                "%1 = memref.alloc() : memref<64x64xf32>"
            ],
            "A3": [
                "%0 = memref.alloc() : memref<64x64xf32>"
            ]
        }
    }
}